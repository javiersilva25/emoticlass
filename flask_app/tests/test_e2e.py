#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Tests End-to-End - Sistema de An√°lisis de Emociones
Lemac Datalab - Suite de Testing Riguroso
"""

import unittest
import sys
import os
import time
import json
import threading
import subprocess
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, WebDriverException

# Agregar el directorio padre al path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class TestE2EFlows(unittest.TestCase):
    """Tests End-to-End para flujos completos de usuario"""
    
    @classmethod
    def setUpClass(cls):
        """Configuraci√≥n inicial para toda la clase"""
        cls.app_process = None
        cls.driver = None
        cls.base_url = "http://localhost:5001"
        
        # Configurar Chrome en modo headless
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        try:
            cls.driver = webdriver.Chrome(options=chrome_options)
            cls.driver.implicitly_wait(10)
        except WebDriverException:
            print("‚ö†Ô∏è Chrome WebDriver no disponible - Tests E2E omitidos")
            cls.driver = None
        
        # Iniciar aplicaci√≥n en background
        cls.start_test_app()
    
    @classmethod
    def tearDownClass(cls):
        """Limpieza despu√©s de todos los tests"""
        if cls.driver:
            cls.driver.quit()
        
        if cls.app_process:
            cls.app_process.terminate()
            cls.app_process.wait()
    
    @classmethod
    def start_test_app(cls):
        """Iniciar aplicaci√≥n para tests"""
        try:
            # Iniciar app_ultra_simple en background
            cls.app_process = subprocess.Popen([
                'python3', 'app_ultra_simple.py'
            ], cwd=os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            
            # Esperar a que la aplicaci√≥n est√© lista
            for _ in range(30):  # 30 segundos m√°ximo
                try:
                    response = requests.get(cls.base_url, timeout=1)
                    if response.status_code == 200:
                        print("‚úÖ Aplicaci√≥n de test iniciada correctamente")
                        return
                except requests.exceptions.RequestException:
                    pass
                time.sleep(1)
            
            print("‚ö†Ô∏è No se pudo iniciar la aplicaci√≥n de test")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error iniciando aplicaci√≥n de test: {e}")
    
    def setUp(self):
        """Configuraci√≥n antes de cada test"""
        if not self.driver:
            self.skipTest("Chrome WebDriver no disponible")
    
    def test_complete_user_flow(self):
        """Test: Flujo completo de usuario desde login hasta dashboard"""
        print("üîÑ Ejecutando flujo completo de usuario...")
        
        # Paso 1: Acceder a la p√°gina de login
        self.driver.get(self.base_url)
        self.assertIn("login", self.driver.title.lower())
        
        # Paso 2: Realizar login
        username_field = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        password_field = self.driver.find_element(By.NAME, "password")
        login_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        
        username_field.send_keys("admin")
        password_field.send_keys("1234")
        login_button.click()
        
        # Verificar redirecci√≥n a configuraci√≥n
        WebDriverWait(self.driver, 10).until(
            EC.url_contains("/config")
        )
        self.assertIn("config", self.driver.current_url)
        
        # Paso 3: Configurar c√°mara
        camera_select = Select(self.driver.find_element(By.NAME, "camera"))
        resolution_select = Select(self.driver.find_element(By.NAME, "resolution"))
        
        camera_select.select_by_value("0")
        resolution_select.select_by_value("640x480")
        
        config_camera_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        config_camera_button.click()
        
        # Esperar a que se procese la configuraci√≥n
        time.sleep(2)
        
        # Paso 4: Configurar datos acad√©micos
        nivel_select = Select(self.driver.find_element(By.NAME, "nivel_ensenanza"))
        nivel_select.select_by_value("basica")
        
        # Esperar a que se carguen los grados
        time.sleep(1)
        
        grado_select = Select(self.driver.find_element(By.NAME, "grado"))
        grado_select.select_by_value("5_basico")
        
        materia_select = Select(self.driver.find_element(By.NAME, "materia"))
        materia_select.select_by_value("matematicas")
        
        # Guardar configuraci√≥n acad√©mica
        academic_button = self.driver.find_element(By.CSS_SELECTOR, "button[name='academic']")
        academic_button.click()
        
        # Esperar a que aparezca el bot√≥n del dashboard
        dashboard_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "üöÄ Ir al Dashboard"))
        )
        
        # Paso 5: Ir al dashboard
        dashboard_button.click()
        
        # Verificar que estamos en el dashboard
        WebDriverWait(self.driver, 10).until(
            EC.url_contains("/dashboard")
        )
        self.assertIn("dashboard", self.driver.current_url)
        
        # Verificar elementos del dashboard
        self.assertTrue(self.driver.find_element(By.ID, "faces-count"))
        self.assertTrue(self.driver.find_element(By.ID, "dominant-emotion"))
        
        print("‚úÖ Flujo completo de usuario ejecutado exitosamente")
    
    def test_login_validation(self):
        """Test: Validaci√≥n de credenciales de login"""
        print("üîê Probando validaci√≥n de login...")
        
        self.driver.get(self.base_url)
        
        # Test con credenciales incorrectas
        username_field = self.driver.find_element(By.NAME, "username")
        password_field = self.driver.find_element(By.NAME, "password")
        login_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        
        username_field.send_keys("wrong")
        password_field.send_keys("wrong")
        login_button.click()
        
        # Verificar que permanece en login con error
        time.sleep(2)
        self.assertIn("login", self.driver.current_url.lower())
        
        # Limpiar campos
        username_field.clear()
        password_field.clear()
        
        # Test con credenciales correctas
        username_field.send_keys("admin")
        password_field.send_keys("1234")
        login_button.click()
        
        # Verificar redirecci√≥n exitosa
        WebDriverWait(self.driver, 10).until(
            EC.url_contains("/config")
        )
        
        print("‚úÖ Validaci√≥n de login funcionando correctamente")
    
    def test_camera_configuration_flow(self):
        """Test: Flujo de configuraci√≥n de c√°mara"""
        print("üìπ Probando configuraci√≥n de c√°mara...")
        
        # Login primero
        self.driver.get(self.base_url)
        self.driver.find_element(By.NAME, "username").send_keys("admin")
        self.driver.find_element(By.NAME, "password").send_keys("1234")
        self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        WebDriverWait(self.driver, 10).until(
            EC.url_contains("/config")
        )
        
        # Verificar que los selectores de c√°mara est√°n presentes
        camera_select = self.driver.find_element(By.NAME, "camera")
        resolution_select = self.driver.find_element(By.NAME, "resolution")
        
        # Verificar que tienen opciones
        camera_options = Select(camera_select).options
        resolution_options = Select(resolution_select).options
        
        self.assertGreater(len(camera_options), 0)
        self.assertGreater(len(resolution_options), 0)
        
        # Configurar c√°mara
        Select(camera_select).select_by_index(0)
        Select(resolution_select).select_by_value("640x480")
        
        config_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        config_button.click()
        
        # Verificar que la configuraci√≥n se proces√≥
        time.sleep(2)
        
        print("‚úÖ Configuraci√≥n de c√°mara funcionando correctamente")
    
    def test_academic_configuration_flow(self):
        """Test: Flujo de configuraci√≥n acad√©mica"""
        print("üéì Probando configuraci√≥n acad√©mica...")
        
        # Login y navegar a configuraci√≥n
        self.driver.get(self.base_url)
        self.driver.find_element(By.NAME, "username").send_keys("admin")
        self.driver.find_element(By.NAME, "password").send_keys("1234")
        self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        WebDriverWait(self.driver, 10).until(
            EC.url_contains("/config")
        )
        
        # Configurar nivel de ense√±anza
        nivel_select = Select(self.driver.find_element(By.NAME, "nivel_ensenanza"))
        nivel_select.select_by_value("basica")
        
        # Esperar a que se actualicen los grados
        time.sleep(1)
        
        # Verificar que el selector de grado se habilit√≥
        grado_select = Select(self.driver.find_element(By.NAME, "grado"))
        grado_options = grado_select.options
        self.assertGreater(len(grado_options), 1)  # M√°s que solo "Seleccionar grado..."
        
        # Seleccionar grado y materia
        grado_select.select_by_value("5_basico")
        
        materia_select = Select(self.driver.find_element(By.NAME, "materia"))
        materia_select.select_by_value("matematicas")
        
        # Verificar que el campo de temperatura est√° presente
        temperatura_field = self.driver.find_element(By.NAME, "temperatura")
        self.assertTrue(temperatura_field.is_displayed())
        
        # Guardar configuraci√≥n acad√©mica
        academic_button = self.driver.find_element(By.CSS_SELECTOR, "button[name='academic']")
        academic_button.click()
        
        # Verificar que aparece el bot√≥n del dashboard
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.LINK_TEXT, "üöÄ Ir al Dashboard"))
        )
        
        print("‚úÖ Configuraci√≥n acad√©mica funcionando correctamente")
    
    def test_dashboard_functionality(self):
        """Test: Funcionalidad del dashboard"""
        print("üìä Probando funcionalidad del dashboard...")
        
        # Completar flujo hasta dashboard
        self.driver.get(self.base_url)
        self.driver.find_element(By.NAME, "username").send_keys("admin")
        self.driver.find_element(By.NAME, "password").send_keys("1234")
        self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        WebDriverWait(self.driver, 10).until(EC.url_contains("/config"))
        
        # Configuraci√≥n r√°pida
        Select(self.driver.find_element(By.NAME, "camera")).select_by_value("0")
        Select(self.driver.find_element(By.NAME, "resolution")).select_by_value("640x480")
        self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        time.sleep(1)
        
        Select(self.driver.find_element(By.NAME, "nivel_ensenanza")).select_by_value("basica")
        time.sleep(1)
        Select(self.driver.find_element(By.NAME, "grado")).select_by_value("5_basico")
        Select(self.driver.find_element(By.NAME, "materia")).select_by_value("matematicas")
        self.driver.find_element(By.CSS_SELECTOR, "button[name='academic']").click()
        
        # Ir al dashboard
        dashboard_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "üöÄ Ir al Dashboard"))
        )
        dashboard_button.click()
        
        WebDriverWait(self.driver, 10).until(EC.url_contains("/dashboard"))
        
        # Verificar elementos del dashboard
        elements_to_check = [
            "faces-count",
            "dominant-emotion",
            "cognitive-load",
            "system-status"
        ]
        
        for element_id in elements_to_check:
            element = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, element_id))
            )
            self.assertTrue(element.is_displayed())
        
        # Verificar que el video feed est√° presente
        video_element = self.driver.find_element(By.CSS_SELECTOR, "img[src*='video_feed']")
        self.assertTrue(video_element.is_displayed())
        
        print("‚úÖ Dashboard funcionando correctamente")
    
    def test_logout_flow(self):
        """Test: Flujo de logout"""
        print("üö™ Probando flujo de logout...")
        
        # Login primero
        self.driver.get(self.base_url)
        self.driver.find_element(By.NAME, "username").send_keys("admin")
        self.driver.find_element(By.NAME, "password").send_keys("1234")
        self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        WebDriverWait(self.driver, 10).until(EC.url_contains("/config"))
        
        # Hacer logout
        logout_link = self.driver.find_element(By.LINK_TEXT, "Cerrar Sesi√≥n")
        logout_link.click()
        
        # Verificar redirecci√≥n al login
        WebDriverWait(self.driver, 10).until(
            EC.url_matches(f"{self.base_url}/?$")
        )
        
        # Verificar que no se puede acceder a p√°ginas protegidas
        self.driver.get(f"{self.base_url}/config")
        WebDriverWait(self.driver, 10).until(
            EC.url_matches(f"{self.base_url}/?$")
        )
        
        print("‚úÖ Logout funcionando correctamente")
    
    def test_responsive_design(self):
        """Test: Dise√±o responsivo"""
        print("üì± Probando dise√±o responsivo...")
        
        # Login
        self.driver.get(self.base_url)
        self.driver.find_element(By.NAME, "username").send_keys("admin")
        self.driver.find_element(By.NAME, "password").send_keys("1234")
        self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        
        WebDriverWait(self.driver, 10).until(EC.url_contains("/config"))
        
        # Probar diferentes tama√±os de pantalla
        screen_sizes = [
            (1920, 1080),  # Desktop
            (1024, 768),   # Tablet
            (375, 667)     # Mobile
        ]
        
        for width, height in screen_sizes:
            self.driver.set_window_size(width, height)
            time.sleep(1)
            
            # Verificar que los elementos principales est√°n visibles
            main_elements = self.driver.find_elements(By.CSS_SELECTOR, ".card")
            for element in main_elements:
                self.assertTrue(element.is_displayed())
        
        # Restaurar tama√±o original
        self.driver.set_window_size(1920, 1080)
        
        print("‚úÖ Dise√±o responsivo funcionando correctamente")

class TestAPIEndToEnd(unittest.TestCase):
    """Tests End-to-End para APIs"""
    
    def setUp(self):
        """Configuraci√≥n antes de cada test"""
        self.base_url = "http://localhost:5001"
        
        # Verificar que la aplicaci√≥n est√° corriendo
        try:
            response = requests.get(self.base_url, timeout=5)
            if response.status_code != 200:
                self.skipTest("Aplicaci√≥n no est√° corriendo")
        except requests.exceptions.RequestException:
            self.skipTest("No se puede conectar a la aplicaci√≥n")
    
    def test_temperature_api_consistency(self):
        """Test: Consistencia de API de temperatura"""
        print("üå°Ô∏è Probando consistencia de API de temperatura...")
        
        temperatures = []
        for _ in range(10):
            response = requests.get(f"{self.base_url}/get_temperature")
            self.assertEqual(response.status_code, 200)
            
            data = response.json()
            self.assertIn('temperatura', data)
            
            temp = data['temperatura']
            self.assertIsInstance(temp, (int, float))
            self.assertGreaterEqual(temp, 10.0)
            self.assertLessEqual(temp, 25.0)
            
            temperatures.append(temp)
            time.sleep(0.1)
        
        # Verificar que hay variaci√≥n (no siempre el mismo valor)
        unique_temps = set(temperatures)
        self.assertGreater(len(unique_temps), 1)
        
        print("‚úÖ API de temperatura consistente")
    
    def test_current_data_api_structure(self):
        """Test: Estructura de API de datos actuales"""
        print("üìä Probando estructura de API de datos actuales...")
        
        response = requests.get(f"{self.base_url}/get_current_data")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        
        # Verificar estructura esperada
        required_fields = [
            'faces_detected',
            'dominant_emotion',
            'cognitive_load',
            'emotions_distribution',
            'system_status'
        ]
        
        for field in required_fields:
            self.assertIn(field, data)
        
        # Verificar tipos de datos
        self.assertIsInstance(data['faces_detected'], int)
        self.assertIsInstance(data['dominant_emotion'], str)
        self.assertIsInstance(data['cognitive_load'], (int, float))
        self.assertIsInstance(data['emotions_distribution'], dict)
        self.assertIsInstance(data['system_status'], str)
        
        print("‚úÖ Estructura de API de datos actuales correcta")

def run_e2e_tests():
    """Ejecutar todos los tests end-to-end"""
    print("üé≠ EJECUTANDO TESTS END-TO-END RIGUROSOS")
    print("=" * 50)
    
    # Crear suite de tests
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Agregar todas las clases de test
    test_classes = [
        TestE2EFlows,
        TestAPIEndToEnd
    ]
    
    for test_class in test_classes:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # Ejecutar tests con verbose output
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Resumen de resultados
    print("\n" + "=" * 50)
    print(f"üìä RESUMEN DE TESTS END-TO-END:")
    print(f"‚úÖ Tests ejecutados: {result.testsRun}")
    print(f"‚ùå Fallos: {len(result.failures)}")
    print(f"‚ö†Ô∏è  Errores: {len(result.errors)}")
    print(f"‚è≠Ô∏è  Omitidos: {len(result.skipped)}")
    
    if result.failures:
        print(f"\n‚ùå FALLOS DETECTADOS:")
        for test, traceback in result.failures:
            print(f"- {test}: {traceback}")
    
    if result.errors:
        print(f"\n‚ö†Ô∏è ERRORES DETECTADOS:")
        for test, traceback in result.errors:
            print(f"- {test}: {traceback}")
    
    # Determinar si todos los tests pasaron
    success = len(result.failures) == 0 and len(result.errors) == 0
    
    if success:
        print(f"\nüéâ TODOS LOS TESTS END-TO-END PASARON EXITOSAMENTE")
    else:
        print(f"\nüí• ALGUNOS TESTS FALLARON - REVISAR FLUJOS DE USUARIO")
    
    return success

if __name__ == '__main__':
    run_e2e_tests()

